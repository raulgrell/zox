(defn fib [n]
    (if (< n 2) n (+ (fib (- n 2)) (fib (- n 1)))))

(var k (clock))
(print (fib 25))
(var t (- (clock) k))
(print t)

(defn ack [m n]
    (cond [
        (= m 0) (+ n 1)
        (and (> m 0) (= n 0) (ack (- m 1) 1))
        (and (> m 0) (> n 0) (ack (- m 1) (ack m (- n 1))))]))

(var a (clock))
(print (ack 3 5))
(var ta (- (clock) a))
(print t)